Аутентификация в Windows.
Она необходима для адекватного входа в Windows. После входа в Windows производится проверка сетевого подсоединения и устанавливается соединение с сервером SQL Server. Далее в силу вступает следующий этап, это: 

Аутентификация в SQL Server.
При регистрации в SQL Server вы должны ввести имя и пароль зарегистрированного пользователя. В случае правильного введения этих данных, пользователь подключается к SQL Server. Если возникает ошибка, то пользователь не сможет работать с SQL Server. В случае же успеха, необходимо пройти еще один этап: 

Аутентификация в базе данных.
Для защиты от несанкционированного доступа, каждая база данных SQL Server имеет собственную защиту. Единственный вариант получить доступ - указать регистрационное имя, позволяющее обращаться к данным, хранящимся в базе данных. 

//////////////////////////////////////////////////////

указанному пользователю, либо группе пользователей разрешается осуществлять подключение к серверу SQL

Execute sp_grantlogin 'HOME\Test_group'

//////////////////////////////////////////////////////

Аннулирование прав. 

Execute sp_revokelogin 'HOME\Test_group'

//////////////////////////////////////////////////////

Если вы аннулировали право на доступ определенному пользователю, а группа, в которую он входит,
имеет возможность регистрироваться в SQL Server, то и пользователь с аннулированными правами
все еще будет иметь возможность подсоединяться. Чтобы этого избежать

Execute sp_denylogin [@loginame=]'логин'

//////////////////////////////////////////////////////

Для создания учетной записи в SQL Server используется хранимая процедура sp_addlogin, а для удаления sp_droplogin. 
Но этого не достаточно, чтобы иметь доступ к данным, хранящимся внутри!

Execute sp_addlogin [@loginame=]'логин', [@passwd=]'пароль', [[@defdb=] 'имя_базы_данных']]

EXEC sp_addlogin @loginame='Alex', @passwd='123', @defdb='library'

//////////////////////////////////////////////////////

Чтобы просмотреть список всех учетных записей и баз данных, с которыми они в праве работать,
необходимо воспользоваться специальной хранимой процедурой SP_HELPLOGINS. 

Execute sp_helplogins

//////////////////////////////////////////////////////

Чтобы удалить учетную запись, необходимо использовать следующий синтаксис: 

Execute sp_droplogin 'имя_учетной_записи'

//////////////////////////////////////////////////////

Бывают случаи, когда нужно изменить пароль для существующего пользователя. 

Execute sp_password @old='test', @new='new_test', @loginame='Test_user'

//////////////////////////////////////////////////////

Добавление пользователя в базу данных.

use library --открытие базы данных library
Execute sp_grantdbaccess 'test_user' /*предоставляем пользователю Test_user
доступ к базе данных library.*/

use library;
EXEC sp_grantdbaccess 'Alex'

//////////////////////////////////////////////////////

Для удаления пользователя используется хранимая процедура SP_REVOKEDBACCESS. Общий синтаксис: 

Execute sp_revokedbaccess [@name_in_db=]'имя_пользователя_в_БД'

//////////////////////////////////////////////////////

Роль представляет из себя совокупность прав, которые доступны включенным в роль пользователям. В Windows вы сталкивались с таким понятием как группа (например, группа Администраторы). Роль - это аналог группы в Windows, но чтобы не было недопониманий, в SQL Server используется термин Роль. Роль очень удобно использовать для обращения к целой группе пользователей, которые в нее входят. 

Роли можно разделить на несколько видов: 

- Роли уровня сервера.
- Роли уровня базы данных.
- Роли уровня приложений.

Роли уровня сервера.
В SQL Server задано 8 ролей уровня сервера. 

- sysadmin - пользователи, включенные в эту роль, являются владельцами всех баз данных SQL Server. У этих пользователей есть права на выполнение любых операций с SQL Server, даже таких как распределение прав доступа среди других пользователей и настройка системы безопасности SQL Server. 
Пользователь sa принадлежит этой роли, и удалить его из нее нельзя!!! Также закрыть доступ определенному пользователю роли sysadmin к определенной базе невозможно!!! 

Эта учетная запись собирает воедино возможности всех остальных ролей:

- serveradmin - это пользователи, которые являются администраторами сервера, но не имеют отношению к базам данных. Члены этой роли имеют возможность изменять параметры системы (sp_configure), завершать работу SQL Server, выполняя команду SHUTDOWN. 
- setupadmin - отнесенные к этой группе пользователи в праве определять хранимые процедуры, запускаемые при старте сервера. Также у них есть права добавлять, удалять и настраивать удаленные связанные серверы. 
- securityadmin - пользователи этой группы создают и управляют учетными записями SQL Server, а также определяют права доступа к базам данных. Они в праве изменять пароли всех пользователей, кроме пользователей, включенных в sysadmin. Также они имеют возможность считывать журнал ошибок. 
- processadmin - эта роль определяет возможность следить за процессами, которые происходят в SQL Server и в базах данных. Они в праве удалять зависшие запросы, используя для этого команду KILL. 
- dbcreator - обычно в эту роль заносятся пользователи, являющиеся владельцами баз данных, т.к. эта роль включает права на резервное копирование, восстановление баз данных и журналов транзакций, а также на создание, изменение, переименование и удаление баз данных. 
- bulkadmin - пользователи этой группы в праве вызывать оператор BULK INSERT, служащий обычно для массовой вставки данных. 
- diskadmin - эта группа определяет права на управление файлами, подключением устройства резервного копирования. Эта роль была создана для совместимости с предыдущими версиями SQL Server. 

//////////////////////////////////////////////////////

Для добавления определенного пользователя в определенную роль уровня сервера необходимо использовать системную хранимую процедуру SP_ADDSRVROLEMEMBER. Общий синтаксис: 

Execute sp_addsrvrolemember @loginame='test_user', @rolename='processadmin'

EXEC sp_addsrvrolemember @loginame='Alex', @rolename='sysadmin'

//////////////////////////////////////////////////////

Для удаления пользователя из определенной роли уровня сервера используется 

Execute sp_dropsrvrolemember @loginame='test_user', @rolename='processadmin'

//////////////////////////////////////////////////////

Роли уровня базы данных.
Каждая база данных имеет в своем распоряжении набор ролей. Для каждой базы данных эти роли обособлены, и влияние на другие базы данных они не оказывают. Т.е. если пользователь получил права в одной базе, это не открывает ему доступ к другой базе данных. 

Всего заранее определенных ролей уровня базы данных 9. 

- db_owner - эта роль назначается владельцам базы данных. Эти пользователи в праве манипулировать любыми данными и настройками в базе данных. В пределах текущей базы их права не ограничены.
- db_accessadmin - это пользователи, которые имеют право на управление учетными записями в базе данных. В частности раздают и анулируют права на ее использование.
- db_securityadmin - эта роль определяет права на администрирование системы защиты базы данных. Она включает возможность создавать роли, назначать пользователей в определенную роль и настраивать доступ к содержимому базы данных.
- db_ddladmin - пользователи этой роли в праве манипулировать объектами базы данных (создавать, удалять, модифицировать), но у них нет прав на определение прав доступа к этим объектам.
- db_backupoperator - эти пользователи имеют право производить резервное копирование базы данных.
- db_datareader - эта роль определяет возможность всех входящих в ее состав пользователей считывать данные из любой таблицы, представления и функции, без ограничений.
- db_datawriter - эти пользователи в праве добавлять, обновлять и удалять данные в текущей базе данных.
- db_denydatareader - эта роль запрещает всем ее пользователям производить вычитку данных.
- db_denydatawriter - пользователям этой роли запрещается производить добавление, обновление и удаление данных из таблиц и представлений текущей базы данных.

//////////////////////////////////////////////////////

Чтобы добавить какого либо пользователя в роль уровня базы данных используется хранимая процедура SP_ADDROLEMEMBER. 

Execute sp_addrolemember [@membername=]'имя', [@rolename=]'имя_роли_уровня_базы_данных'

//////////////////////////////////////////////////////

Для удаления пользователя из роли уровня базы данных используется хранимая процедура SP_DROPROLEMEMBER. 

Execute sp_droprolemember [@membername=]'имя', [@rolename=]'имя_роли_уровня_базы_данных'

//////////////////////////////////////////////////////

Объектные права доступа.

Grant Select, Update ON books TO test_user

--grant update on some_table(some_column) to some_db_user; -- даем права на обновление столбца в таблице

revoke ... 

//////////////////////////////////////////////////////

Командные права доступа.

CREATE DATABASE
CREATE DEFAULT
CREATE FUNCTION
CREATE PROCEDURE
CREATE RULE
CREATE TABLE
CREATE VIEW
BACKUP DATABASE
BACKUP LOG

Grant Create View To test_user

//////////////////////////////////////////////////////

